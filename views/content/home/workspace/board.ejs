<script src="/javascript/home/boards.js"></script>
<% layout('./layouts/boilerplate.ejs')%>
<%- include('../../../layouts/partials/settings.ejs') %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">

<style>
  .dragging{
    opacity: 1;
    background: transparent;
    z-index: 4;
    position: relative;
    
  }
</style>
<div class="content fullscreen" id="content-menu">
  <style>
    .card-popup {
      display: none;
      /* Add any other styles for the pop-up */
    }
    .card-container.show-popup .card-popup {
      display: block;
      /* Add styles for the visible pop-up */
      /* For example, you can use absolute positioning and z-index to overlay the pop-up on top of other elements */
      position: absolute;
      z-index: 999;
      /* Add any other styles you need */
    }
    .row-highlight {
  border: 2px dashed blue;
}
  </style>

  <input type="text" class="hidden" name="" value="<%=  wpboard._id%>" id="idd">
  <form id="kanbanForm" method="post" enctype="multipart/form-data">
    <div class="flex items-center  justify-between   p-3 border rounded-xl">
      <div class="flex flex-col border-r-2	 " style="width: 38%;">
        <span class="text-2xl">May</span>
        <span class="text-gray-600">Today is Saturday, jul 19th,2023</span>
      </div>


      <div style="width: 38%; " class="border-r-2"> 
      <span class="text-2xl font-medium"><%= wpboard.title %> - <b class="text-blue-500">#Business</b></span> 
      <div>
        <img src="" class="rounded-full" alt="" srcset="">
      </div>
    </div>

    <div class="flex justify-center"style="width: 23%;">
      <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Save
      </button>
      <button type="button" class="bg-black ml-4 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Create task
      </button>


    </div>
    </div>

<br>    <div class="flex ">
    <div class="kanban-board  flex">

      <% wpboard.rows.sort((a, b) => a.position - b.position).forEach(function(row,i) { %>
                      <input type="number" class="hidden" name="position" value="<%= row.position%>">

        <div  data-row="<%= row._id %>" id="row-<%=row._id %>" class="flex flex-col rowdata ml-3 bg-gray-100 p-2 rounded-md" draggable="true">
        <div class="todo  " style="width: 18em; max-height: 29em; overflow: scroll;">
          <div class="todo-tab rounded p-3 bg-blue-200 flex justify-between">
            <h2>           <input class="border-none bg-transparent w-full" type="text" value="<%= row.title %>" name="rows.<%= i %>.title">
            </h2>
            <span class="hidden">
              <input type="text" name="rows.<%= i %>.position" value="<%= row.position %>">
            </span>            <div class="">
              <button id="dropdownMenuIconButton" data-dropdown-toggle="dropdownDots<%= row.position%>"> <i class="bi bi-three-dots"></i></button>
              </button>
              <div id="dropdownDots<%= row.position%>" class="z-50 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 ">
                <ul class="py-2 text-sm text-gray-700" aria-labelledby="dropdownMenuIconButton">
                  <li>
                    <a href="#" class="block px-4 py-2 hover:bg-gray-100 ">Sorting</a>
                  </li>
                  <li>
                    <a href="#" class="block px-4 py-2 hover:bg-gray-100 ">Change color</a>
                  </li>
                  <li>
                    <a href="#" class="block px-4 py-2 hover:bg-gray-100 ">Douplicate Row</a>
                  </li>
                </ul>
                <div class="py-2">
                  <button data-id="<%= row._id %>" class="row-delete block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 "><i class="bi bi-trash3-fill ml-2"></i> Delete Row</button>
                </div>
            </div>
            
            </div>
          </div>
          <ul class="cards" id="row-add-<%=i %>">
            <% row.cards.sort((a, b) => a.position - b.position).forEach(function(card, j) { %>
              <input type="number" data-position="<%=card.position %>" id="position-<%=card._id %>" name="rows.<%= i %>.cards.<%= j %>.position" value="<%= card.position%>">
              <input type="number"  data-position="<%=card.row %>" id="card-row-<%=card._id %>" name="rows.<%= i %>.cards.<%= j %>.row" value="<%=card.row %>">
              

              <div data-position="<%=card.position %>" data-row="<%= i  %>" data-cardid="<%= card._id %>" class="cards-ban mt-2 scroll gap-2 flex" draggable="true"  id="card-<%= card._id %>">
                <div class="card-ban rounded-xl p-3 mb-2 bg-blue-200">
                  <div class="flex justify-between">
                    <span>
                      Today
                    </span>
                    <button type="button" id="cardDownbutton"  data-cardetail="<%= card._id%>" >
                      <i class="text-xl bi bi-arrow-up-right-circle hover:bi-arrow-up-right-circle-fill"></i>
                    </button>
                 <div id="opencard-<%= card._id %>" class="hidden"> 
                  
                      <div class="fixed inset-0 z-10 overflow-y-auto">
                        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                          <!--
                            Modal panel, show/hide based on modal state.
                    
                            Entering: "ease-out duration-300"
                              From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                              To: "opacity-100 translate-y-0 sm:scale-100"
                            Leaving: "ease-in duration-200"
                              From: "opacity-100 translate-y-0 sm:scale-100"
                              To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                          -->
                          <div class="fixed inset-0 bg-gray-900 bg-opacity-75 transition-opacity"></div>

                          <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-5xl">
                            <div class="bg-white  p-3">
                              <div class="flex items-center justify-between"> 
                              <span class="font-medium text-xl"> Add new event </span>
                              <i class="bi bi-x-square-fill text-gray-600 text-xl" ></i>
                                </div> 
                                <br>
                                
                                <div class=" flex ">
                                  <div class="eventtitle">
                                    <div class="mb-5 flex flex-col"> 
                                    <label for="title" class="font-medium" >Title</label>
                                    <input class="p-2 rounded-md bg-gray-100 cardtitle " data-id="<%=  card._id%>" placeholder="Enter a title" value="<%= card.title %>" name="rows.<%= i %>.cards.<%= j %>.title"   type="text">
                                  </div>
                                    <div class="mb-5 flex flex-col border p-2 rounded-md"> 
                                    <label for="title" class="font-medium" >Image</label>
                                    <input type="file" name="rows.<%= i %>.cards.<%= j %>.image" id="mainimage" class="mb-3 ">
                                    <div class="p-2 rounded-md border">
                                      <img class="w-10 h-10" src="<%=card.image%>" alt="" srcset="">
                                    </div>
                                  </div>
                                  

                                  <div class="mb-5 flex flex-col"> 
                                    <label for="title" class="font-medium cardlocation" data-id="<%=  card._id%>" >Location</label>

                                    <div class="relative w-full">
                                      <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                        <i class="bi text-xl text-gray-700 bi-geo-alt-fill"></i>
                                      </div>
                                      <input type="text" id="simple-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  " placeholder="Enter location" >
                                  </div>
                                    </div>
                                    <div class="mb-5 flex flex-col"> 
                                    <label for="title" class="font-medium" >Select Date</label>

                                  <div class="date"> 
                                    <div date-rangepicker class="flex items-center">
                                      <div class="relative">
                                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                            <svg class="w-4 h-4 text-gray-500 " aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                              <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                                            </svg>
                                        </div>
                                        <input  type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  " placeholder="Select date start">
                                      </div>
                                      <span class="mx-4 text-gray-500">to</span>
                                      <div class="relative">
                                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                            <svg class="w-4 h-4 text-gray-500 " aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                              <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                                            </svg>
                                        </div>
                                        <input type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  " placeholder="Select date end">
                                    </div>
                                    </div>
                                  </div>
                                  </div>
                                  
                                  <span class="text-gray-600">Thursday, april 22 <b>04:30 - 05:30</b></span>
                                  <br>
                                  <br>
                                  <div class="mb-5 flex "> 

                                  <button class="p-3 items-center w-26 h-11 rounded-md border flex "><i class="bi bi-plus text-xl" ></i> <span class="pl-1">Add member</span></button>
                                  </div>
                                  <div class="mb-5 flex flex-col"> 
                                    <label for="title" class="font-medium" >Tag color</label>
                                    <div class="flex ">
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-blue-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-pink-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-yellow-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-red-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-green-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-voilet-500"></span>
                                      <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-ornage-500"></span>

                                    </div>
                                    </div>
                                  
                                  </div>

                                  <div class="eventdescription  ml-3 ">
                                    <div class="mb-5 flex flex-col"> 
                                      <label for="title" class="font-medium" >Description</label>
                                      
                                      <div>
                                        <div class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50">
                                            <div class="flex items-center justify-between px-3 py-2 border-b">
                                                <div class="flex flex-wrap items-center divide-gray-200 sm:divide-x ">
                                                    <div class="flex items-center space-x-1 sm:pr-4">
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 20">
                                                                <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M1 6v8a5 5 0 1 0 10 0V4.5a3.5 3.5 0 1 0-7 0V13a2 2 0 0 0 4 0V6"/>
                                                            </svg>
                                                            <span class="sr-only">Attach file</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                                <path d="M8 0a7.992 7.992 0 0 0-6.583 12.535 1 1 0 0 0 .12.183l.12.146c.112.145.227.285.326.4l5.245 6.374a1 1 0 0 0 1.545-.003l5.092-6.205c.206-.222.4-.455.578-.7l.127-.155a.934.934 0 0 0 .122-.192A8.001 8.001 0 0 0 8 0Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z"/>
                                                            </svg>
                                                            <span class="sr-only">Embed map</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z"/>
                                                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z"/>
                                                            </svg>
                                                            <span class="sr-only">Upload image</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.96 2.96 0 0 0 .13 5H5Z"/>
                                                                <path d="M14.067 0H7v5a2 2 0 0 1-2 2H0v11a1.969 1.969 0 0 0 1.933 2h12.134A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.933-2ZM6.709 13.809a1 1 0 1 1-1.418 1.409l-2-2.013a1 1 0 0 1 0-1.412l2-2a1 1 0 0 1 1.414 1.414L5.412 12.5l1.297 1.309Zm6-.6-2 2.013a1 1 0 1 1-1.418-1.409l1.3-1.307-1.295-1.295a1 1 0 0 1 1.414-1.414l2 2a1 1 0 0 1-.001 1.408v.004Z"/>
                                                            </svg>
                                                            <span class="sr-only">Format code</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM13.5 6a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm-7 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm3.5 9.5A5.5 5.5 0 0 1 4.6 11h10.81A5.5 5.5 0 0 1 10 15.5Z"/>
                                                            </svg>
                                                            <span class="sr-only">Add emoji</span>
                                                        </button>
                                                    </div>
                                                    <div class="flex flex-wrap items-center space-x-1 sm:pl-4">
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 18">
                                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.5 3h9.563M9.5 9h9.563M9.5 15h9.563M1.5 13a2 2 0 1 1 3.321 1.5L1.5 17h5m-5-15 2-1v6m-2 0h4"/>
                                                            </svg>
                                                            <span class="sr-only">Add list</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M18 7.5h-.423l-.452-1.09.3-.3a1.5 1.5 0 0 0 0-2.121L16.01 2.575a1.5 1.5 0 0 0-2.121 0l-.3.3-1.089-.452V2A1.5 1.5 0 0 0 11 .5H9A1.5 1.5 0 0 0 7.5 2v.423l-1.09.452-.3-.3a1.5 1.5 0 0 0-2.121 0L2.576 3.99a1.5 1.5 0 0 0 0 2.121l.3.3L2.423 7.5H2A1.5 1.5 0 0 0 .5 9v2A1.5 1.5 0 0 0 2 12.5h.423l.452 1.09-.3.3a1.5 1.5 0 0 0 0 2.121l1.415 1.413a1.5 1.5 0 0 0 2.121 0l.3-.3 1.09.452V18A1.5 1.5 0 0 0 9 19.5h2a1.5 1.5 0 0 0 1.5-1.5v-.423l1.09-.452.3.3a1.5 1.5 0 0 0 2.121 0l1.415-1.414a1.5 1.5 0 0 0 0-2.121l-.3-.3.452-1.09H18a1.5 1.5 0 0 0 1.5-1.5V9A1.5 1.5 0 0 0 18 7.5Zm-8 6a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7Z"/>
                                                            </svg>
                                                            <span class="sr-only">Settings</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M18 2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2ZM2 18V7h6.7l.4-.409A4.309 4.309 0 0 1 15.753 7H18v11H2Z"/>
                                                                <path d="M8.139 10.411 5.289 13.3A1 1 0 0 0 5 14v2a1 1 0 0 0 1 1h2a1 1 0 0 0 .7-.288l2.886-2.851-3.447-3.45ZM14 8a2.463 2.463 0 0 0-3.484 0l-.971.983 3.468 3.468.987-.971A2.463 2.463 0 0 0 14 8Z"/>
                                                            </svg>
                                                            <span class="sr-only">Timeline</span>
                                                        </button>
                                                        <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M14.707 7.793a1 1 0 0 0-1.414 0L11 10.086V1.5a1 1 0 0 0-2 0v8.586L6.707 7.793a1 1 0 1 0-1.414 1.414l4 4a1 1 0 0 0 1.416 0l4-4a1 1 0 0 0-.002-1.414Z"/>
                                                                <path d="M18 12h-2.55l-2.975 2.975a3.5 3.5 0 0 1-4.95 0L4.55 12H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2Zm-3 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"/>
                                                            </svg>
                                                            <span class="sr-only">Download</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <button type="button" data-tooltip-target="tooltip-fullscreen" class="p-2 text-gray-500 rounded cursor-pointer sm:ml-auto hover:text-gray-900 hover:bg-gray-100 ">
                                                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 19 19">
                                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 1h5m0 0v5m0-5-5 5M1.979 6V1H7m0 16.042H1.979V12M18 12v5.042h-5M13 12l5 5M2 1l5 5m0 6-5 5"/>
                                                    </svg>
                                                    <span class="sr-only">Full screen</span>
                                                </button>
                                                <div id="tooltip-fullscreen" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip">
                                                    Show full screen
                                                    <div class="tooltip-arrow" data-popper-arrow></div>
                                                </div>
                                            </div>
                                            <div class="px-4 py-2 bg-white rounded-b-lg ">
                                                <label for="editor" class="sr-only">Publish post</label>
                                                <textarea id="editor" rows="8" class="block w-full px-0 text-sm text-gray-800 bg-white border-0 carddescription focus:ring-0  " data-id="<%= card._id %>" placeholder="Write an article..." value="<%= card.description %>" name="rows.<%= i %>.cards.<%= j %>.description" ><%= card.description %></textarea>
                                            </div>
                                        </div>
                                     
                                      </div>

                                  </div>
                                  <div class="mb-5 flex flex-col"> 
                                    <label for="title" class="font-medium" >Reminder</label>
                                    <div class="flex">
                                      <span class="ml-2">
                                        <select id="reminder" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                          <option value="notification" selected>Notification</option>
                                          <option value="reminder">Reminder</option>
                                          <option value="eamil">Email</option>
                                          <option value="workspace">Workspace</option>
                                        </select>
                                      </span>
                                      <span class="ml-2">
                                        <input type="text" class="rounded-lg p-2 bg-gray-300 " placeholder="1">
                                      </span>
                                      <span class="ml-2">
                                        <select id="reminder" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                          <option value="notification" selected>Days</option>
                                          <option value="reminder">Month</option>
                                          <option value="eamil">Weeks</option>
                                          <option value="workspace">Year</option>
                                        </select>
                                      </span>
                                    </div>

                                    </div>
                                    <br>
                                    <div class="mb-5 flex flex-col"> 
                                      <div class="time">
                                      <input type="time"  id="time" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] ">
                                    </div>
                                </div>
                                
                            </div>
                         
                              </div>
                            <div class=" sm:flex  ">
                              <button type="button" class="  inline-flex w-full justify-center rounded-md bg-blue-600 p-3 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 sm:ml-3 sm:w-auto">Save event</button>
                              <button type="button" id="card-cancel-<%=card._id %>" class="mt-3 mr-4 inline-flex w-full ml-3 justify-center rounded-md bg-white p-3 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Cancel</button>
                            </div>
                            <br>
                            </div>
                           
                          </div>
                        </div>
                      </div>
                    </div>

                  </div>
                  <span class="text-2xl w-8">
                    <input type="text"  id="ftitle-<%=card._id  %>"  class="bg-transparent border-0" value="<%= card.title %>">
                    
                  </span><br>
                  <span class="text-gray-500">
                    <input type="text" class="border-none bg-transparent"  id="">
                  </span>
                  <br><br>
                  <div class="time-tags flex items-center content-center justify-between">
                    <%
  function parseDate(dateStr) {
    let date = new Date(dateStr);
    let month = date.toLocaleString('default', { month: 'long' });
    let time = date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    return   time;
  }
%>
                    <span class="text-sm"> <input class="bg-transparent border-0 w-26"type="text" value=" <%= parseDate(card.dueDate) %>"  id=""></span>
                    <div class="tags">
                      <span class="bg-gray-100 text-gray-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">Dark</span>
                      <span class="bg-blue-400 text-gray-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">health</span>
                    </div>
                  </div>
                </div>
                <div class="card- hidden">
                    <!-- Add your pop-up content here -->
                    <div style="display: flex;
                    justify-content: center;" id="defaultModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50  w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
                      <div class="relative w-full max-w-2xl max-h-full">
                          <!-- Modal content -->
                          <div class="relative bg-white rounded-lg shadow">
                              <!-- Modal header -->
                              <div class="flex items-start justify-between p-4 border-b rounded-t">
                                  <h3 class="text-xl ftitle font-semibold text-gray-900 ">
                                      <%=card.title %>
                                  </h3>
                                  <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center " data-modal-hide="defaultModal">
                                      <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                      <span class="sr-only">Close modal</span>
                                  </button>
                              </div>
                              <!-- Modal body -->
                              <div class="p-6 space-y-6">
                                  <p class="text-base leading-relaxed text-gray-500 ">                     <%=card.description %>
  
                                      With less than a month to go before the European Union enacts new consumer privacy laws for its citizens, companies around the world are updating their terms of service agreements to comply.
                                  </p>
                                  <p class="text-base leading-relaxed text-gray-500 ">
                                      The European Union’s General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant to ensure a common set of data rights in the European Union. It requires organizations to notify users as soon as possible of high-risk data breaches that could personally affect them.
                                  </p>
                              </div>
                              <!-- Modal footer -->
                              <div class="flex items-center p-6 space-x-2 border-t border-gray-200 rounded-b">
                                  <button  type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">I accept</button>
                                  <button data-modal-hide="defaultModal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">Decline</button>
                              </div>
                          </div>
                      </div>
                    </div>
                  </div>
              </div>

              
              
            
            <% }) %>
          </ul>
        </div>
        <div  data-row="<%= i  %>"  id="Add-task-<%= row._id %>"style="width: 18em;" class="rounded hidden addcard addcard-<%= row._id %> p-2 bg-gray-50">
          <input placeholder="Title" class="tasktitle border rounded-md p-2 w-full "  type="text">
          <!-- <textarea name="" class="border w-full mt-2" id="" cols="30" rows="3"></textarea> -->
        </div> 
        <button data-id="<%=row._id %>"   id="newtask" class="w-full  p-5 bg-gray-200 hover:bg-gray-300 rounded-lg">Add card</button>

        
      </div>
      <% }) %>
        <button style="height: 4em;" id="newrow" class="add-row-form ml-4 p-3 hover:bg-gray-200 rounded border bg-gray-100" >Add new Row</button>
    </div>
  </div>
</div>
<button type="submit" class="add-row-form ml-4 p-3 hover:bg-gray-200 rounded border bg-gray-100">Save Kanban Board</button>

</form>
<script>
  const cardtitle = document.querySelectorAll('.cardtitle')
  const carddescription = document.querySelectorAll('.carddescription')
  const cardlocation = document.querySelectorAll('.cardlocation')
//function presend
 
  cardtitle.forEach(card => {
  //makw a event litstinner for the card input function after typeing
  card.addEventListener('keyup',function(e){
    //get the card id
    const cardid = card.getAttribute('data-id')
    //get the card value
    const cardvalue = card.value

    let ftitle = document.querySelector(`#ftitle-${cardid}`)
    //assign ftitle value to card title
    ftitle.value = cardvalue


    //get the card title
  })
})


    const data = {};
    let  form = document.getElementById('kanbanForm');

    const cardDown = document.querySelectorAll('#cardDownbutton')
  console.log(cardDown)
    cardDown.forEach(card => {
      console.log(card)
      card.addEventListener('click',function(e){
        const datacard = card.getAttribute('data-cardetail')
        const model = document.querySelector(`#opencard-${datacard}`)
        const removemodel = document.querySelector(`#card-cancel-${datacard}`)
        model.classList.remove('hidden')
        removemodel.addEventListener('click',function(e){
          e.preventDefault()
          model.classList.add('hidden')

        })
      })
    })

  function removeRowAndSubmit(rowId,event) {
  // Find the index of the row in the data object based on its position
  const rowIndex = data.rows.findIndex((row) => row.position === rowId.toString());

  if (rowIndex !== -1) {
    // Remove the row from the data object
    data.rows.splice(rowIndex, 1);
  }

  const rowElement = document.getElementById(`row-${rowId}`);
  rowElement.remove();
  

  handleFormSubmit(event); // Call the form submission function after removing the row
}

const rowdelete = document.querySelectorAll('.row-delete');
rowdelete.forEach((row) => {
  row.addEventListener('click', (event) => {
    event.preventDefault();
    const rowid = row.getAttribute('data-id');
    const rowelement = document.getElementById(`row-${rowid}`);
    const kanbanboard = document.getElementById('kanban-board');
    rowelement.remove();
    // Update the data object to remove the deleted row
    const rowIndex = data.rows.findIndex((row) => row._id === rowid);
    if (rowIndex !== -1) {
      data.rows.splice(rowIndex, 1);
    }

    // Remove the row from the form submission data
    const formRowsInput = form.querySelector(`input[name="rows.${rowIndex}.title"]`);
    if (formRowsInput) {
      formRowsInput.remove();
    }
  });
});
  
const newrow = document.getElementById('newrow');

  const carddelete = document.querySelectorAll('.card-delete');
  carddelete.forEach((card)=>{
    card.addEventListener('click',(event)=>{
      const cardid = card.getAttribute('data-id');
      const rowid = card.getAttribute('data-row');
      const cardelement = document.getElementById(`card-${cardid}`);
      const rowelement = document.getElementById(`row-${rowid}`);
    cardelement.remove();
      
    })
  })


  function newrowfunction() {
    // const rowhtml = `
    // <div class="row">

  }
  let draggedCardOriginalPosition = null;

  newrow.addEventListener('click',newrowfunction())
  const rows = document.querySelectorAll('.todo');

  // Function to handle the dragstart event when a card is dragged
  function handleCardDragStart(event) {
    event.dataTransfer.setData('text/plain', event.target.dataset.cardid);
    event.dataTransfer.effectAllowed = 'move';
    event.target.classList.add('dragging');
    event.target.classList.add('opacity-100');
    draggedCardOriginalPosition = event.target.closest('.rowdata');
    //find the card in the draggedCardOriginalPosition 
    const cardToMove = document.querySelector(`[data-cardid="${event.target.dataset.cardid}"]`);

console.log(cardToMove)
    

  
  }


  // Function to handle the dragenter and dragover events when a card is dragged over a valid drop target
  function handleCardDragOver(event) {
    event.preventDefault();
  }

  function handleCardDrop(event) {
  event.preventDefault();

  const cardId = event.dataTransfer.getData('text/plain');
  const targetRowId = event.currentTarget.getAttribute('data-row');
  const targetRowIndex = parseInt(targetRowId);
  if (isNaN(targetRowIndex)) return;

  const cardToMove = document.querySelector(`[data-cardid="${cardId}"]`);
  if (!cardToMove) return;

  const targetRow = document.querySelector(`#row-add-${targetRowId}`);
  if (!targetRow) return;

  // Remove the card from its original position
  const originalRowIndex = cardToMove.getAttribute('data-row');
  const originalRow = document.querySelector(`#row-add-${originalRowIndex}`);
  const cardRowid = document.querySelector(`#card-row-${cardId}`);
  console.log(cardRowid)
  originalRow.removeChild(cardToMove);

  targetRow.appendChild(cardToMove);
    cardRowid.value = targetRowId;
 
 
  console.log('Row' + targetRowIndex)
  console.log(cardRowid.value)

   

  // Add the card to the new position in the target row
  // // Update the card's data-position attribute
  // const newIndex = Array.from(targetRow.children).indexOf(cardToMove);
  // console.log(targetRow.children.indexOf(cardToMove))
    
  // Update the card's input field for position

  
  // const positionInput = document.querySelector(`#position-${cardId}`);
  // console.log(positionInput)
  // if (positionInput) {
  //   positionInput.value = newIndex + 1;
  // }
  
  // Any other necessary data structure updates go here
  
  // Update the styles and classes
  targetRow.classList.add('bg-red-100');

  // You might want to perform further actions like updating the server or saving changes to local storage

  // Additional code goes here if needed
}


  // Add event listeners to each card for drag and drop functionality
  const cards = document.querySelectorAll('.cards-ban');
  cards.forEach((card) => {
    card.addEventListener('dragstart', handleCardDragStart);
    card.addEventListener('dragover', handleCardDragOver);
    card.addEventListener('drop', handleCardDrop);
  });



  const formid = document.getElementById('idd').value;
  const newtask = document.querySelectorAll('#newtask');



  document.addEventListener('click', function (e) {
  const formid = document.getElementById('idd').value;
  const inputs = document.querySelectorAll('input');
  const newtask = document.querySelectorAll('#newtask');

  for (let task of newtask) {
    task.addEventListener('click', function (e) {
      e.preventDefault();
      const id = task.getAttribute('data-id');
      const addcard = document.querySelector(`.addcard-${id}`);
      addcard.classList.remove('hidden');
      task.classList.add('hidden');
    });
  }

  // Check if the click target is inside the .addcard element or #newtask button
  const isInsideAddCard = e.target.closest('.addcard');
  const isNewTaskButton = e.target.closest('#newtask');

  if (!isInsideAddCard && !isNewTaskButton) {
    // Hide .addcard and show #newtask
    const allAddCards = document.querySelectorAll('.addcard');
    for (let addCard of allAddCards) {
      addCard.classList.add('hidden');
    }

    const allNewTasks = document.querySelectorAll('#newtask');
    for (let newTask of allNewTasks) {
      newTask.classList.remove('hidden');
    }
  }
});

// Add event listener for 'Enter' key press on the input elements within .addcard

form.addEventListener('keydown', function (event) {
  // Check if the Enter key is pressed
  if (event.key === 'Enter') {
    // Check if the active element (focused element) is an input inside .addcard
    const activeElement = document.activeElement;
      event.preventDefault();
      const addCards = document.querySelectorAll('.addcard');
      for (let addCard of addCards) {
        const inputElement = addCard.querySelector('input');
        if (inputElement) {
          // Get the row index and card index from the data attributes
          const rowIndex = addCard.getAttribute('data-row');
          const rowadd = document.querySelector(`#row-add-${rowIndex}`);

          const cardIndex = rowadd.children.length;

          inputElement.placeholder = `Card ${cardIndex + 1} Title`; // Set placeholder with card index value

          inputElement.addEventListener('keyup', function (event) {
            if (event.key === 'Enter') {
              console.log('Data isss'  + rowIndex)
              // Prevent form submission when Enter is pressed in the input element
              event.preventDefault();

              const taskTitle = inputElement.value;
              const taskDescription ="defutdes"

              // Create a new card element
              const newCard = document.createElement('div');
              newCard.className = 'cards-ban mt-2 scroll gap-2 flex';
              newCard.setAttribute('data-position', cardIndex);
              newCard.setAttribute('data-row', rowIndex);
              newCard.setAttribute('draggable', true);
              newCard.setAttribute('id', `card-${cardIndex}`);
              newCard.innerHTML = `
              <div class="flex flex-col">
              <input type="number" class="" data-position="${cardIndex}" id="position-${cardIndex}" name="rows.${rowIndex}.cards.${cardIndex}.position" value="${cardIndex}">                    
              <input type="number" class=""  data-position="${rowIndex}" id="card-row-${cardIndex}" name="rows.${rowIndex}.cards.${cardIndex}.row" value="${rowIndex}">
                </div>
                <div class="card-ban rounded-xl p-3 mb-2 bg-blue-200 "  data-position="${cardIndex}"  data-row="${rowIndex}" draggable="true" id="card-${cardIndex}"">
                  <!-- ... card content ... -->
                  <span class="text-2xl w-8">
                    <input type="text" class="bg-transparent border-0" value="${taskTitle}" name="rows.${rowIndex}.cards.${cardIndex}.title">
                  </span><br>
                  <span class="text-gray-500">
                    <input type="text" class="border-none bg-transparent" value="${taskDescription}" name="rows.${rowIndex}.cards.${cardIndex}.description" id="">
                  </span>
                  <!-- ... card content ... -->
                </div>
                <div class="card- hidden">
                  <!-- ... popup  content ... -->
                </div>
              `;

              // Append the new card to the corresponding row
              rowadd.appendChild(newCard);

              // Clear the input after adding the new card
              inputElement.value = '';
              inputElement.placeholder = `Card ${cardIndex + 2} Title`;
            }
          });
        }
      }
    }
  }
);

function sendFormData(formDataToSend) {
  const xhr = new XMLHttpRequest();
  xhr.open('POST', `/kanbanboard/${formid}`);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE) {
      if (xhr.status === 200) {
        console.log('Kanban board data saved successfully!');
      } else {
        console.error('Failed to save Kanban board data.');
      }
    }
  };

  // Send formDataToSend directly
  xhr.send(formDataToSend);
}


 function handleFormSubmit(event) {
  event.preventDefault();

  // Get form data
  const formData = new FormData(form);
  const formDataToSend = new FormData();

  const imageInput = document.querySelectorAll('#mainimage');
for (let i = 0; i < imageInput.length; i++) {
  const selectedFile = imageInput[i].files[0];
  if (selectedFile) {
    // Generate a unique filename using a timestamp or other method
    const uniqueFilename = `${Date.now()}_${selectedFile.name}`;
    formDataToSend.append(`image`, selectedFile); // Use a unique field name for each image
  }
}
  // Process form data to match your server schema
  formData.forEach((value, key) => {
    const [parent, index, property] = key.split('.');
    // console.log(parent)
    // console.log(index)
    // console.log(property)
    // console.log('key' +key)
    // console.log('value' +value)

    if (parent === 'rows') {
      if (!data[parent]) data[parent] = [];
      if (!data[parent][index]) data[parent][index] = {};


      if (property === 'cards') {
        console.log(data[parent][index][property])
        // Handle cards data as an array for each row
        if (!data[parent][index][property]) data[parent][index][property] = [];
        const cardIndex = data[parent][index][property].length;
        data[parent][index][property][cardIndex] = {};

        // Populate the card object with title, description, and dueDate
        data[parent][index][property][cardIndex].title = formData.get(`rows.${index}.cards.${cardIndex}.title`);
        data[parent][index][property][cardIndex].description = formData.get(`rows.${index}.cards.${cardIndex}.description`);
        data[parent][index][property][cardIndex].dueDate = formData.get(`rows.${index}.cards.${cardIndex}.dueDate`);
        data[parent][index][property][cardIndex].image = formData.get(`rows.${index}.cards.${cardIndex}.image`);
        data[parent][index][property][cardIndex].position = formData.get(`rows.${index}.cards.${cardIndex}.position`);
        data[parent][index][property][cardIndex].row = formData.get(`rows.${index}.cards.${cardIndex}.row`);

      const cardImageFile = formData.get(`rows.${index}.cards.${cardIndex}.image`);
      if (cardImageFile instanceof File && cardImageFile.name) {
        // Assign the image file name to data.image
        data.image = cardImageFile.name;
        data[parent][index][property][cardIndex].image = cardImageFile.name;

        
      } else {
        data[parent][index][property][cardIndex].image = '';
        data.image = 'cardImageFile.name';

        data.image = null; // If no image, you might want to set it to null or some default value
      }
    

      } else {
        data[parent][index][property] = value;
      }
    } else {
      data[key] = value;
    }

    
    
  });
  

  // Update card positions after drag-and-drop
  // rows.forEach((row, i) => {
  //   console.log(row);
  //   const cards = row.querySelectorAll('.cards-ban');
  //   console.log(cards)
  //   data.rows[i].cards = Array.from(cards).map((card) => ({
  //     title: card.querySelector('input[name^="rows."]').value,
  //     description: card.querySelector('input[name^="rows."]').value,
  //   }));
  // });


  // rows.forEach((row, i) => {
  //   console.log(row);
  //   const cards = row.querySelectorAll('.cards-ban');
  //   data.rows[i].cards = Array.from(cards).map((card) => ({
  //     title: card.querySelector('input[name^="rows."]').value,
  //     description: card.querySelector('input[name^="rows."]').value,
  //   }));
  // });

  // Send XHR POST request with the form data
    formDataToSend.append('rows', JSON.stringify(data.rows));
    
    console.log(data.rows);
  // Send XHR POST request with the form data
  sendFormData(formDataToSend);
}


  // Add event listener to the form submit button
  form.addEventListener('submit', handleFormSubmit);
  // Function to auto-submit the form after 10 seconds
  function autoSubmitForm(e) {
    e.preventDefault();
    form.removeEventListener('submit', handleFormSubmit); // Remove the submit event listener to prevent double submission
    form.submit(); // Submit the form
  }

  // Auto-submit the form after 10 seconds
  setTimeout(autoSubmitForm, 1000000); // 10000 milliseconds = 10 seconds
</script>

