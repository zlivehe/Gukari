<div class="p-3 create-task hidden eventform">
    <div class="flex  justify-center p-3" >
        <!-- <span id="errmsg" class="errmsg p-3 text-center w-full rounded   w-full bg-red-300"> </span> -->

    </div>
    <form id="newtaskform">


        <div class="create border rounded-lg p-6">
            <div class="flex justify-between">
                <span class="font-medium text-2xl">Create Event</span>
                <button id="closevent"><i class="bi bi-x text-4xl"></i>
                </button>
            </div>
            <div class=" mb-3 relative">
                <input type="text" id="floating_outlined" name="title"
                    class="block border px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                    placeholder=" " />
                <label for="floating_outlined"
                    class="absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 left-1">Title
                </label>
            </div>
            <br>
            <div class="description">

                <label for="message" class="block mb-2 text-sm font-medium text-gray-900 ">Description
                </label>
                <textarea name="description" id="message" rows="4"
                    class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 "
                    placeholder="Write your thoughts here..."></textarea>

            </div><br>

            <div class="flex justify-between flex-wrap">

                <div class="date">
                    <span>Date</span>

                    <div date-rangepicker class="flex items-center">
                        <div class="relative">
                            <div
                                class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400"
                                    fill="currentColor" viewBox="0 0 20 20"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd"
                                        d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                                        clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <input name="startdate" type="text"
                                class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-100 focus:border-blue-100 block w-full pl-10 p-4 "
                                placeholder="Select date start">
                        </div>
                        <span class="mx-4 text-gray-500">to</span>
                        <div class="relative">
                            <div
                                class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400"
                                    fill="currentColor" viewBox="0 0 20 20"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd"
                                        d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                                        clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <input name="enddate" type="text"
                                class=" border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-100 focus:border-blue-100 block w-full pl-10 p-4  "
                                placeholder="Select date end">
                        </div>
                    </div>

                </div>
                <div class="priority w-46">
                    <span>Priority</span>

                    <label for="underline_select" class="sr-only">Underline select</label>
                    <select name="priority" id="underline_select"
                        class="block py-2.5 px-0 w-full text-sm text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none focus:outline-none focus:ring-0 focus:border-gray-200 peer">
                        <option value="Primary" selected>Primary</option>
                        <option value="Secondary">Secondary</option>
                        <option value="Listed">Listed</option>

                    </select>
                </div>

                <div class="time">
                    <span>Time</span>

                    <input type="time" name="time" id="time"
                        class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] ">
                </div>

            </div>
            <br> <br>
            <div class="location-file">
                <div class="mb-3">
                    <label for="image" class="block text-gray-700">Image</label>
                    <input type="file" id="image" name="image"
                        class=" custom-file-input form-input mt-1 block" />
                </div>

            </div>
            <div class="mb-1 flex  right justify-end		">
                <button id="cancel" class="p-3 rounded text-white bg-gray-500 "> Cancel</button>

                <button type="submit" class="p-3 ml-3 rounded text-white bg-blue-500 ">Create
                    Event</button>

            </div>

        </div>
    </form>

</div>


<script>
    const eventform = document.querySelector('.eventform');
    const newtaskform = document.querySelector('#newtaskform');
    const createvenet = document.getElementById('createvenet');
    const closeButton = document.getElementById('closevent');
    const errmsg = document.getElementById('errmsg');
    const cancelButton = document.getElementById('cancel');

    createvenet.addEventListener('click', (e) => {
        e.preventDefault();
        eventform.classList.remove('hidden');
        createvenet.classList.add('hidden');
    });

    closeButton.addEventListener('click', (e) => {
        e.preventDefault();

        eventform.classList.add('hidden');
        createvenet.classList.remove('hidden');
    });

    cancelButton.addEventListener('click', (e) => {
        e.preventDefault();

        eventform.classList.add('hidden');
        createvenet.classList.remove('hidden');
    });

    function submitForm() {
const formData = new FormData(newtaskform);
const xhr = new XMLHttpRequest();

xhr.onreadystatechange = function () {
if (xhr.readyState === XMLHttpRequest.DONE) {
  if (xhr.status === 200) {
    // Handle the successful response
    const responseDate = JSON.parse(xhr.response)
    const taskContainer = document.getElementById('task-container');
      const newTaskElement = createTaskElement(responseDate.reminder);
      taskContainer.prepend(newTaskElement);


    errmsg.innerHTML = responseDate.message;

  } else {
    // Handle the error response
    const errorResponse = JSON.parse(xhr.responseText);
    alert(errorResponse.message);
  }
}
};
// Function to create a new task element based on the reminder object
function createTaskElement(reminder) {
  const taskElement = document.createElement('div');
  taskElement.classList.add('p-3', 'rounded', 'border', 'mb-3');
  const startDate = new Date(reminder.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  const endDate = new Date(reminder.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

  // Populate the task element with the reminder data
  // You can customize this part to fit your desired UI structure
  taskElement.innerHTML = `
  <div class=" flex justify-center "> 
                                <button id="completedTask" class="rounded-full border w-3 h-4 p-4"></button>

                            <div class="w-full ml-2">
                            <div class="flex justify-between">
                                <span class="text-xl font-medium">
                                    ${reminder.title}
                                </span>

                                <button data-modal-target="defaultModal${reminder.title}" data-modal-toggle="defaultModal${reminder.title}"  class=""><i class="i bi-three-dots"></i></button>
                                <div id="defaultModal${reminder.title}" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
                                    <div class="relative w-full max-w-2xl max-h-full">
                                        <!-- Modal content -->
                                        <div class="relative bg-white rounded-lg shadow ">
                                            <!-- Modal header -->
                                            <div class="flex items-start justify-between p-4 border-b rounded-t ">
                                                <h3 class="text-xl font-semibold text-gray-900 ">
                                                 <input value="${reminder.title}" class="p-4" type="text">                                                 </h3>
                                                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center " data-modal-hide="defaultModal${reminder.title}">
                                                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                                                    <span class="sr-only">Close modal</span>
                                                </button>
                                            </div>
                                            <!-- Modal body -->
                                            <div class="pl-5 pr-5">
                                                
                                                <span><i class="bi bi-justify-left "></i>
                                                    Description</span>
                                                <textarea class="p-2 rounded-md mb-1 mr-3 w-full bg-gray-50" name="" id="" cols="30" rows="5">${reminder.description}</textarea>
                                               
                                                
                                            </div>
                                            <!-- Modal footer -->
                                            <div class="flex items-center p-6 space-x-2 rounded-b">
                                                <button data-modal-hide="defaultModal${reminder.title}" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">I accept</button>
                                                <button data-modal-hide="defaultModal${reminder.title}" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">Decline</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <span class="text-gray-500 mt-3 text-sm">
                                ${reminder.description}
                            </span><br>
                            
                            <span class="text-sm">
                               Due:${startDate} by
                                        ${endDate}
                                            Around 
                                            ${reminder.time ? `

                                             ` : ''}

                                            
                            </span>
                            <div class="flex justify-between w-full">
                                <div class="flex ">
                            

                                        <div class="imgs">
                                           ${reminder.imageurl ? `
                                             <div class="w-12 h-12 ml-2">
                                            <img class="object-cover w-full h-full rounded" src="${reminder.imageurl}" alt="Image">
                                              </div>
                                            ` : ''}
                                        </div>
                                </div>

                                <div class="mb-5">
                                    <button data-modal-hide="defaultModal${reminder.title}>
                                        <i class="bi bi-paperclip"></i>
                                        <span class="text-xs"> 1</span>

                                    </button>
                                    <button data-modal-hide="defaultModal${reminder.title} class="ml-3 ">
                                        <i class="bi bi-check2-all"></i>
                                        <span class="text-xs font-medium"> 0</span>

                                    </button>


                                </div>
                            </div>
                        </div>

                        </div>
                        
    
  `;

  return taskElement;
}

// Function to get the appropriate icon class based on the priority
function getPriorityIconClass(priority) {
  if (priority === 'Primary') {
    return 'bi-emoji-smile-fill text-yellow-600';
  } else if (priority === 'Secondary') {
    return 'bi-emoji-neutral-fill text-blue-600';
  } else if (priority === 'Listed') {
    return 'bi-emoji-frown-fill text-red-600';
  } else {
    return '';
  }
}
xhr.open('POST', '/newtask');
xhr.setRequestHeader('enctype', 'multipart/form-data'); // Set the enctype header
xhr.send(formData);
}

    newtaskform.addEventListener('submit', function (e) {
        e.preventDefault();
        submitForm();
    });
</script>   