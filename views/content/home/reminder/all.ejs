<% layout('./layouts/boilerplate.ejs')%>
<%- include('../../../layouts/partials/settings.ejs') %>

<style>
    ul {
  margin:0;
  padding:0
}
li {
  cursor:move;
  display:block;
  padding:20px 10px;
  background:white;
  border-bottom:solid 1px gray;
}
.image-upload {
  position: relative;
}

input[type="file"] {
  display: none;
}

.custom-upload-button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  cursor: pointer;
  border-radius: 5px;
}

.preview-container {
  margin-top: 20px;
  display: flex;
  flex-wrap: wrap;
}

.preview-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
  margin: 5px;
}
@media only screen and (max-width: 600px) {

.sidedit{
  width: 100%;
}
}
</style>
    <div class="content fullscreen" id="content-menu">
        <div class="flex w-full">
            <div class=" main-content ">
                <div class="flex p-2 justify-between">
                    <span class=" text-4xl text-gray-500 font-bold">All</span>
                    <button id="createvenet" type="button" class="createvenet">
                        <i class="bi text-3xl bi-plus-square-fill"></i>
                    </button>

                </div>
              <!-- add -->
              <%- include('./newreminder.ejs') %>

                <div class="tasks p-3">
                    <!-- <ul>
                        <li draggable="true" class="sortable-bulk">List Item 1</li>
                        <li draggable="true" class="sortable-bulk">List Item 2</li>
                        <li draggable="true" class="sortable-bulk">List Item 3</li>
                        <li draggable="true" class="sortable-bulk">List Item 4</li>
                        <li draggable="true" class="sortable-bulk">List Item 5</li>
                        <li draggable="true" class="sortable-bulk">List Item 6</li>
                        <li draggable="true" class="sortable-bulk">List Item 7</li>
                        <li draggable="true" class="sortable-bulk">List Item 8</li>
                        <li draggable="true" class="sortable-bulk">List Item 9</li>
                        <li draggable="true" class="sortable-bulk">List Item 10</li>
                    </ul> -->
                    <hr class="">
                    <span class="text-gray-400 font-medium text-sm">Morning </span>
                    <br>
                    <div class="flex">

                    <div id="task-container" class="task-container w-full">

                      <% Task.sort((a, b) => a.position - b.position).forEach(task => { %>
                        <%=task.position %>
                        <section  data-id="<%= task._id %>" id="task<%= task._id %>"   data-position="<%= task.position %>"  class="task-main p-3 rounded-xl sortable-bulk border mb-3" draggable="true">
                            <div class=" flex justify-center "> 
                                <button data-task="<%= task._id %>" id="completedTask" class="rounded-full border w-3 h-4 p-4"></button>

                            <div class="w-full ml-2">
                            <div class="flex justify-between">
                                <span name="title" id="title-<%= task._id %>" style="height: 2em;" class="text-xl w-full resize-none border-none p-0 focus:outline-none  h-auto font-medium"><%=task.title%></span>

                                <button data-modal-target="defaultModal<%=task.title%>" data-modal-toggle="defaultModal<%=task.title%>"  class=""><i class="i bi-three-dots"></i></button>

                               
                                

                            </div>
                            <textarea id="description-<%=task._id%>" name="description" style="height: 3em;" class="text-gray-500 text-sm w-full p-1 focus:outline-none  h-auto  resize-none"><%= task.description %></textarea><br>
                            
                            <span name="date" class="text-sm">
                              <% if (task.startDate && task.endDate) { %>
                                    <%= task.startDate.toLocaleDateString(undefined, { month: 'short' ,
                                        day: 'numeric' }) %> by
                                        <%= task.endDate.toLocaleDateString(undefined, { month: 'short'
                                            , day: 'numeric' }) %>                                    <% if(task.time){ %>
                                            <% } %> Around                                              <b class="text-red-500"  id="time-<%=task._id %>" >   <%= task.time %> </b>                                       <%}%>

                                            
                                            </span>
                            
                            <div class="flex justify-between w-full">
                                <div class="flex ">
                            

                                        <div class="imgs  flex">
                                            <% if(task.imageurl){ %>
                                                <div class="w-12 h-12 ml-2">
                                                    <img class="object-cover w-full h-full rounded" src="<%=task.imageurl %>" alt="Image">
                                                  </div>
                                                <% } %>
                                                <div class="ml-1 preview-containerd" id="preview-<%=task._id %>">
                                    </div>
                                                  <button class="photobutton" type="submit"> 
                                                <i class="bi text-gray-600 text-5xl ml-2 bi-plus-square-fill"></i>
                                            </button>

                                        </div>
                                </div>

                                <div class="mb-5">
                                    <button>
                                        <i class="bi bi-paperclip"></i>
                                        <span class="text-xs"> 1</span>

                                    </button>
                                    <button class="ml-3 ">
                                        <i class="bi bi-check2-all"></i>
                                        <span class="text-xs font-medium"> 0</span>

                                    </button>
                                    <button class="ml-3 opencard" data-id="<%=task._id %>">
                                        <i class="bi bi-fullscreen"></i>
                                    </button>


                                </div>
                            </div>
                        </div>

                        </div>
                    </section>                


                        <% }) %>
                    </div>
                    <% Task.forEach(task => { %>
                      
                      <form id="<%=task._id %>"  class="hidden w-full" data-id="<%=task._id %>" id="EditTask" onsubmit="handleFormSubmit(event)" enctype="multipart/form-data">
                        <aside class=" w-full h-screen  w-full sidedit sticky top-0">
                        <div class="flex justify-between w-full items-center">
                       <input class="text-3xl title border-none hover:border-0 focus:border-0 font-medium" name="title" value="<%=task.title %>">
                       <button data-id="<%= task._id %>" class="font-bold hidemodel text-2xl">X</button>
                    </div>
                    <br>
                    <div class=" flex w-full justify-between ">
                        <div class="eventtitle w-full">
                         
                        <div class="mb-5 flex flex-col"> 
                          <label for="title" class="font-medium cardlocation" data-id="64d1106d424c426738ac3a78">Location</label>

                          <div class="relative w-full">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                              <i class="bi text-xl text-gray-700 bi-geo-alt-fill"></i>
                            </div>
                            <input type="text" name="location" id="simple-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  " placeholder="Enter location" autocomplete="off">
                        </div>
                          </div>
                          <div class="mb-5 flex flex-col"> 
                            <!-- <label for="title" class="font-medium cardlocation" data-id="64d1106d424c426738ac3a78">Upload file</label> -->
  
                            <div class="relative w-full">
                                <div class="image-upload">
                                    <input name="image" data-id="<%= task._id%>" type="file" id="upload-<%= task._id%>" multiple accept="image/*">
                                    <label for="upload" data-id="<%= task._id%>" class="custom-upload-button">Choose Images</label>
                                  </div>
                                  <div class="flex mt-3 items-center">
                                    <%if(task.imageurl && task.imageurl !== '') {%>

                                    <img class="rounded-md h-12 w-12" src="<%=task.imageurl %>" alt="" srcset="">
                                    <% } %>
                                    
                                    <div class="ml-1 preview-container">
                                    </div>
                                  </div>

                                 
                          </div>
                            </div>


                          <div class="mb-5 flex flex-col"> 
                          <label for="title" class="font-medium">Select Date</label>

                          <div class="relative max-w-sm">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none">
                              <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                              </svg>
                            </div>
                            <input name="endDate" value="<%=task.date %>" datepicker type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 " placeholder="Select date">
                          </div>
                        </div>
                                                    
                        <span name="date" class=" text-gray-600">
                            <% if (task.startDate && task.endDate) { %>
                                  <span class="date-" id="date-<%= %>">    <%= task.endDate.toLocaleDateString(undefined, { month: 'short'
                                          , day: 'numeric' }) %>       </span>                             <% if(task.time){ %>
                                          <% } %> Around                                              <b class="" >   <%= task.time %> </b>                                       <%}%>

                                          
                                          </span>
                        <br>
                        <br>
                        <div class="mb-5 flex "> 

                        <button class="p-3 items-center w-26 h-11 rounded-md border flex "><i class="bi bi-plus text-xl"></i> <span class="pl-1">Add member</span></button>
                        </div>
                        <div class="mb-5 flex flex-col"> 
                          <label for="title" class="font-medium">Tag color</label>
                          <div class="flex ">
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-blue-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-pink-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-yellow-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-red-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-green-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-voilet-500"></span>
                            <span class="p-4 flex ml-1 w-5 h-2 rounded-md bg-ornage-500"></span>

                          </div>
                          </div>
                        
                        </div>

                        <div class="eventdescription w-full  ml-3 ">
                          <div class="mb-5 flex flex-col"> 
                            <label for="title" class="font-medium">Description</label>
                            
                            <div>
                              <div class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50">
                                  <div class="flex items-center justify-between px-3 py-2 border-b">
                                      <div class="flex flex-wrap items-center divide-gray-200 sm:divide-x ">
                                          <div class="flex items-center space-x-1 sm:pr-4">
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 20">
                                                      <path stroke="currentColor" stroke-linejoin="round" stroke-width="2" d="M1 6v8a5 5 0 1 0 10 0V4.5a3.5 3.5 0 1 0-7 0V13a2 2 0 0 0 4 0V6"></path>
                                                  </svg>
                                                  <span class="sr-only">Attach file</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                      <path d="M8 0a7.992 7.992 0 0 0-6.583 12.535 1 1 0 0 0 .12.183l.12.146c.112.145.227.285.326.4l5.245 6.374a1 1 0 0 0 1.545-.003l5.092-6.205c.206-.222.4-.455.578-.7l.127-.155a.934.934 0 0 0 .122-.192A8.001 8.001 0 0 0 8 0Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Embed map</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                      <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z"></path>
                                                      <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Upload image</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                                      <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.96 2.96 0 0 0 .13 5H5Z"></path>
                                                      <path d="M14.067 0H7v5a2 2 0 0 1-2 2H0v11a1.969 1.969 0 0 0 1.933 2h12.134A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.933-2ZM6.709 13.809a1 1 0 1 1-1.418 1.409l-2-2.013a1 1 0 0 1 0-1.412l2-2a1 1 0 0 1 1.414 1.414L5.412 12.5l1.297 1.309Zm6-.6-2 2.013a1 1 0 1 1-1.418-1.409l1.3-1.307-1.295-1.295a1 1 0 0 1 1.414-1.414l2 2a1 1 0 0 1-.001 1.408v.004Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Format code</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM13.5 6a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm-7 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm3.5 9.5A5.5 5.5 0 0 1 4.6 11h10.81A5.5 5.5 0 0 1 10 15.5Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Add emoji</span>
                                              </button>
                                          </div>
                                          <div class="flex flex-wrap items-center space-x-1 sm:pl-4">
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 18">
                                                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.5 3h9.563M9.5 9h9.563M9.5 15h9.563M1.5 13a2 2 0 1 1 3.321 1.5L1.5 17h5m-5-15 2-1v6m-2 0h4"></path>
                                                  </svg>
                                                  <span class="sr-only">Add list</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                      <path d="M18 7.5h-.423l-.452-1.09.3-.3a1.5 1.5 0 0 0 0-2.121L16.01 2.575a1.5 1.5 0 0 0-2.121 0l-.3.3-1.089-.452V2A1.5 1.5 0 0 0 11 .5H9A1.5 1.5 0 0 0 7.5 2v.423l-1.09.452-.3-.3a1.5 1.5 0 0 0-2.121 0L2.576 3.99a1.5 1.5 0 0 0 0 2.121l.3.3L2.423 7.5H2A1.5 1.5 0 0 0 .5 9v2A1.5 1.5 0 0 0 2 12.5h.423l.452 1.09-.3.3a1.5 1.5 0 0 0 0 2.121l1.415 1.413a1.5 1.5 0 0 0 2.121 0l.3-.3 1.09.452V18A1.5 1.5 0 0 0 9 19.5h2a1.5 1.5 0 0 0 1.5-1.5v-.423l1.09-.452.3.3a1.5 1.5 0 0 0 2.121 0l1.415-1.414a1.5 1.5 0 0 0 0-2.121l-.3-.3.452-1.09H18a1.5 1.5 0 0 0 1.5-1.5V9A1.5 1.5 0 0 0 18 7.5Zm-8 6a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Settings</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                      <path d="M18 2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2ZM2 18V7h6.7l.4-.409A4.309 4.309 0 0 1 15.753 7H18v11H2Z"></path>
                                                      <path d="M8.139 10.411 5.289 13.3A1 1 0 0 0 5 14v2a1 1 0 0 0 1 1h2a1 1 0 0 0 .7-.288l2.886-2.851-3.447-3.45ZM14 8a2.463 2.463 0 0 0-3.484 0l-.971.983 3.468 3.468.987-.971A2.463 2.463 0 0 0 14 8Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Timeline</span>
                                              </button>
                                              <button type="button" class="p-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 ">
                                                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                      <path d="M14.707 7.793a1 1 0 0 0-1.414 0L11 10.086V1.5a1 1 0 0 0-2 0v8.586L6.707 7.793a1 1 0 1 0-1.414 1.414l4 4a1 1 0 0 0 1.416 0l4-4a1 1 0 0 0-.002-1.414Z"></path>
                                                      <path d="M18 12h-2.55l-2.975 2.975a3.5 3.5 0 0 1-4.95 0L4.55 12H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2Zm-3 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
                                                  </svg>
                                                  <span class="sr-only">Download</span>
                                              </button>
                                          </div>
                                      </div>
                                      <button type="button" data-tooltip-target="tooltip-fullscreen" class="p-2 text-gray-500 rounded cursor-pointer sm:ml-auto hover:text-gray-900 hover:bg-gray-100 ">
                                          <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 19 19">
                                              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 1h5m0 0v5m0-5-5 5M1.979 6V1H7m0 16.042H1.979V12M18 12v5.042h-5M13 12l5 5M2 1l5 5m0 6-5 5"></path>
                                          </svg>
                                          <span class="sr-only">Full screen</span>
                                      </button>
                                      <div id="tooltip-fullscreen" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip">
                                          Show full screen
                                          <div class="tooltip-arrow" data-popper-arrow=""></div>
                                      </div>
                                  </div>
                                  <div class="px-4 py-2 bg-white rounded-b-lg ">
                                      <label for="editor" class="sr-only">Publish post</label>
                                      <textarea id="editor"  rows="8" class="block w-full px-0 text-sm text-gray-800  border-0 carddescription focus:ring-0  " data-id="64d1106d424c426738ac3a78" placeholder="Write an article..." value="dd" name="description"><%=task.description %></textarea>
                                  </div>
                              </div>
                           
                            </div>

                        </div>
                        <div class="mb-5 flex flex-col"> 
                          <label for="title" class="font-medium">Reminder</label>
                          <div class="flex">
                            <span class="ml-2">
                              <select name="reminder" id="reminder" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                <option value="notification" selected="">Notification</option>
                                <option value="reminder">Reminder</option>
                                <option value="eamil">Email</option>
                                <option value="workspace">Workspace</option>
                              </select>
                            </span>
                            <span class="ml-1">
                              <input type="number" name="reminderday" class="rounded-lg p-2 bg-gray-300 " placeholder="1">
                            </span>
                            <span class="ml-2">
                              <select name="reminderepeat" id="reminder" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                <option value="notification" selected="">Days</option>
                                <option value="reminder">Month</option>
                                <option value="eamil">Weeks</option>
                                <option value="workspace">Year</option>
                              </select>
                            </span>
                          </div>

                          </div>
                          <br>
                          <div class="mb-2 flex flex-col"> 
                            <div class="time">
                            <input type="time" name="time" value="<%= task.time %>" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] ">
                          
                          </div>
                          
                      </div>
                
                  </div>
             
                    </div>
                    <div class="flex justify-center w-full items-center ">
                        <button type="submit" class="btn bg-blue-500 text-white border-0 rounded-lg p-2 ">Save</button>
                       </div>
                    </aside>
                  </form>
                <% }) %>

                </div>


                        <hr class="">
                            <br>
                            <hr class="">
                            <span class=" text-gray-400 font-medium text-sm">Afternon </span>
                            <hr class="">
                            <br>
                            <hr class="">
                            <span class="text-gray-400 font-medium text-sm">Tonight </span>
                            <hr class="">


                </div>

            </div>
            <%- include('../../../layouts/partials/sidebar.ejs') %>

        </div>
    </div>
<script>
function handleFormSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  const form = event.target; // Get the form element
  const formData = new FormData(form); // Create a FormData object
  const id = form.dataset.id;
  const changedtitled = document.querySelector(`#title-${id}`);
  const changeddescription = document.querySelector(`#description-${id}`);
  const changedtime = document.querySelector(`#time-${id}`);
  const changeddate = document.querySelector(`#date-${id}`);

  // Now you have the form data, including the image file

  // You can append additional fields to the FormData if needed
  formData.append('additionalField', 'someValue');

  fetch(`/reminder/${id}`, {
    method: 'POST',
    body: formData, // Use the FormData object directly
  })
    .then((response) => response.json())
    .then((data) => {
      changedtitled.innerHTML = data.event.title;
      changeddescription.innerHTML = data.event.description;
      changedtime.innerHTML = data.event.time;
      changeddate.innerHTML = data.event.date;

      console.log('Success:', data);

    })
    .catch((error) => {
      console.error('Error:', error);
    });
}
  
  const hidemodel = document.querySelectorAll('.hidemodel');
    hidemodel.forEach(model => {
        model.addEventListener('click', function (e) {
            e.preventDefault();
            const id = model.dataset.id;
            const taskcontainer = document.querySelector('.task-container');

            const aisdecard = document.getElementById(id);
            aisdecard.classList.toggle('hidden');
            taskcontainer.classList.add('w-full');
            
        })
    })
    let activeslected = null;

const opencard = document.querySelectorAll('.opencard');
opencard.forEach(card => {
    card.addEventListener('click', function (e) {
        e.preventDefault();
        const id = card.dataset.id;
        const aisdecard = document.getElementById(id);

        // If there's an active selected card, hide it
        if (activeslected !== null) {
            const activeCard = document.getElementById(activeslected);
            activeCard.classList.add('hidden');
        }

        // Toggle the visibility of the current card
        aisdecard.classList.toggle('hidden');

        // Update the active selected card ID
        activeslected = aisdecard.id;

        const taskcontainer = document.querySelector('.task-container');
        taskcontainer.classList.remove('w-full');
    })
})

    const photobutton = document.querySelectorAll('.photobutton');
  
    photobutton.forEach(button => {
        button.addEventListener('click', function(e){
            e.preventDefault();
            const id = button.dataset.task;
            const form = document.getElementById('savetask');
            const formData = new FormData(form);
            const plainFormData = Object.fromEntries(formData.entries());
            const formDataJsonString = JSON.stringify(plainFormData);
            console.log(formDataJsonString);
        })
    })
           const form = document.getElementById('reminderform');
    // form.addEventListener('submit',function(e){
    //     e.preventDefault();
    //     const formData = new FormData(this);
    //     const plainFormData = Object.fromEntries(formData.entries());
    //     const formDataJsonString = JSON.stringify(plainFormData);
    //     console.log(formDataJsonString);

    // } );

    const completedTask = document.querySelectorAll('#completedTask');
    completedTask.forEach(task => {
        task.addEventListener('click', (e) => {
            e.preventDefault();
            const id = task.dataset.task;
            const cardsection = document.getElementById(`task${id}`);
            cardsection.classList.toggle('bg-green-100');
            //set a timeput to remove the card and add fading effect
            setTimeout(() => {
                cardsection.remove();
            }, 1000);
           
            task.classList.toggle('bg-green-500');
            task.classList.toggle('border-green-500');
            fetch(`/tasks/${id}/completed`, {
                method: 'POST',
            }).then(res => res.json())
                .then(data => console.log(data))
                .catch(err => console.log(err))

            

        })
    })

function submitFormFetch(event) {
    event.preventDefault();
    const form = event.target;
    const url = form.action;
    const formData = new FormData(form);
    const plainFormData = Object.fromEntries(formData.entries());
    const formDataJsonString = JSON.stringify(plainFormData);
    const fetchOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: formDataJsonString,
    };
    fetch(url, fetchOptions)
      .then((response) => {
        if (response.ok) {
          return response.json();
        }
        return Promise.reject(response);
      })
      .then((data) => {
        console.log(data);
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }


`<% Task.forEach(task => { %>
    const form_<%=task._id%> = document.getElementById('updatelist_<%=task._id%>');
    form_<%=task._id%>.addEventListener('submit', submitFormFetch);
<% }) %>`
function submitit(e){
    e.preventDefault();

}


    var dragging = null;

document.addEventListener('dragstart', function(event) {
		dragging = event.target;
        event.target.classList.add('dragging');
        console.log(dragging);
    event.dataTransfer.setData('text/html', dragging);
});

document.addEventListener('dragover', function(event) {
    event.preventDefault();
});

document.addEventListener('dragenter', function(event) {
    if (event.target.tagName === 'SECTION') {
      event.target.style['border-bottom'] = 'solid 4px blue';

    }else{
      event.target.style['border-bottom'] = '';

    }

});

document.addEventListener('dragleave', function(event) {
    event.target.style['border-bottom'] = '';
});

document.addEventListener('drop', function(event) {
    event.preventDefault();
    
    if(event.target.tagName === "SECTION"){
        event.target.style['border-bottom'] = '';

        const taskId = dragging.getAttribute('data-id');
        const newPosition = Array.from(event.target.parentNode.children).indexOf(dragging);

        const previousPosition = parseInt(dragging.getAttribute('data-position'));
        const higherPositionTask = event.target.parentNode.children[newPosition - 1];
        const higherPosition = parseInt(higherPositionTask.getAttribute('data-position'));
        
        // Update the positions of the dragged task and the task above it
        updateTaskPosition(taskId, higherPosition);
        updateTaskPosition(higherPositionTask.getAttribute('data-id'), previousPosition);
      console.log(higherPositionTask);
        // Swap the dragged task and the task above it in the DOM

        event.target.parentNode.insertBefore(dragging, event.target.nextSibling);
    } else {
        event.target.style['border-bottom'] = '';
    }
});



function updateTaskPosition(taskId, newPosition) {
  // Make an API call to update the task position in the database
  fetch(`/event/${taskId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ newPosition }),
  })
    .then(response => response.json())
    .then(data => {
      // Handle success or error
    })
    .catch(error => {
      // Handle error
    });
}


// const uploadInputs = document.querySelectorAll('#upload');
const customuploadbutton = document.querySelectorAll('.custom-upload-button');
console.log(customuploadbutton);

customuploadbutton.forEach(button => {
  button.addEventListener('click', function(e){
    console.log('custom-upload-button');
    e.preventDefault();
    const id = button.dataset.id;
    const preview = document.getElementById(`preview-${id}`);
    const upload = document.getElementById(`upload-${id}`);
    //open the file chooser
    upload.click();
    upload.addEventListener('change', handleImageUpload.bind(upload));
    
   
  })
})

// uploadInputs.forEach(uploadInput => {
  
//   uploadInput.addEventListener('change', handleImageUpload.bind(uploadInput));
// });
function handleImageUpload(event) {
  const id = this.dataset.id;
    const previewContainer = document.getElementById(`preview-${id}`);
  console.log('handleImageUpload');
  previewContainer.innerHTML = '';
  console.log(previewContainer);
  console.log(id);


  const files = event.target.files;

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    const reader = new FileReader();

    reader.onload = function () {
      const image = new Image();
      image.src = reader.result;
      image.classList.add('preview-image');
      image.classList.add('w-12');
        image.classList.add('h-12');
       image.classList.add('rounded-md');


      previewContainer.appendChild(image);
    };

    reader.readAsDataURL(file);
  }
}
</script>