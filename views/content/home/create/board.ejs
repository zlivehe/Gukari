<%- include('../../../layouts/partials/settings.ejs') %>
    <title>Gukari-Create</title>
    <style>
        body {

            margin: 0;
            background: #009578;
        }

        #app {
            display: grid;
            grid-template-columns: repeat(auto-fill, 200px);
            padding: 24px;
            gap: 24px;
        }

        .note {
            height: 200px;
            box-sizing: border-box;
            padding: 16px;
            border: none;
            border-radius: 10px;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.15);
            resize: none;
            font-family: sans-serif;
            font-size: 16px;
        }

        .add-note {
            height: 200px;
            border: none;
            outline: none;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            font-size: 120px;
            color: rgba(0, 0, 0, 0.5);
            cursor: pointer;
            transition: background 0.2s;
        }

        .add-note:hover {
            background: rgba(0, 0, 0, 0.2);
        }

        .note[draggable="true"] {
            opacity: 0.5;
        }
    </style>
    </head>
    <div id="app">
        <button class="add-note" type="button">+</button>
    </div>

    <script>
        const notesContainer = document.getElementById("app");
        const addNoteButton = notesContainer.querySelector(".add-note");

        const notes = getNotes();
        if (Array.isArray(notes)) {
            notes.forEach((note, index) => {
                const noteElement = createNoteElement(note.id, note.content, index);
                notesContainer.insertBefore(noteElement, addNoteButton);
            });
        }

        addNoteButton.addEventListener("click", () => addNote());

        function getNotes() {
            const notes = JSON.parse(localStorage.getItem("stickynotes-notes") || "[]");
            return Array.isArray(notes) ? notes : [];
        }

        function saveNotes(notes) {
            localStorage.setItem("stickynotes-notes", JSON.stringify(notes));
        }

        function createNoteElement(id, content, index) {
            const element = document.createElement("textarea");

            element.classList.add("note");
            element.value = content;
            element.placeholder = "Empty Sticky Note";
            element.setAttribute("data-index", index);

            element.addEventListener("change", () => {
                updateNote(id, element.value);
            });

            element.addEventListener("dblclick", () => {
                const doDelete = confirm(
                    "Are you sure you wish to delete this sticky note?"
                );

                if (doDelete) {
                    deleteNote(id, element);
                }
            });

            element.setAttribute("draggable", "true"); // Enable drag

            return element;
        }

        function addNote() {
            const notes = getNotes();
            const noteObject = {
                id: Math.floor(Math.random() * 100000),
                content: ""
            };

            const noteElement = createNoteElement(noteObject.id, noteObject.content, notes.length);
            notesContainer.insertBefore(noteElement, addNoteButton);

            notes.push(noteObject);
            saveNotes(notes);
        }

        function updateNote(id, newContent) {
            const notes = getNotes();
            const targetNoteIndex = notes.findIndex((note) => note.id == id);

            if (targetNoteIndex !== -1) {
                const targetNote = notes[targetNoteIndex];
                targetNote.content = newContent;
                saveNotes(notes);
            }
        }

        function deleteNote(id, element) {
            const notes = getNotes();
            const targetNoteIndex = notes.findIndex((note) => note.id == id);

            if (targetNoteIndex !== -1) {
                notes.splice(targetNoteIndex, 1);
                saveNotes(notes);
                notesContainer.removeChild(element);
            }
        }

        function swapNotes(sourceIndex, targetIndex) {
            const notes = getNotes();

            const sourceNote = notes[sourceIndex];
            const targetNote = notes[targetIndex];

            notes[sourceIndex] = targetNote;
            notes[targetIndex] = sourceNote;

            saveNotes(notes);
        }

        let dragStartIndex;

        function handleDragStart(e) {
            dragStartIndex = parseInt(e.target.getAttribute("data-index"));
        }

        function handleDragOver(e) {
            e.preventDefault();
        }

        function handleDrop(e) {
            const dragEndIndex = parseInt(e.target.getAttribute("data-index"));
            swapNotes(dragStartIndex, dragEndIndex);
        }

        // Add event listeners to note elements
        notesContainer.addEventListener("dragstart", handleDragStart);
        notesContainer.addEventListener("dragover", handleDragOver);
        notesContainer.addEventListener("drop", handleDrop);
    </script>