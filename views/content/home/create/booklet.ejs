<title>Create a New Study Set| Gukari </title>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="keywords" content="Study, Quizset, Gukari">

<style>
    select#countries option[value="US"] {
        background-image: url("https://img.icons8.com/external-flatarticons-blue-flatarticons/65/external-global-ux-and-ui-flatarticons-blue-flatarticons.png");
        background-repeat: no-repeat;
        background-position: 1em 50%;
        padding-left: 2em;
    }

    select#countries option[value="CA"] {
        background-image: url("path-to-ca-icon.png");
        background-repeat: no-repeat;
        background-position: 1em 50%;
        padding-left: 2em;
    }

    select#countries option[value="FR"] {
        background-image: url("path-to-fr-icon.png");
        background-repeat: no-repeat;
        background-position: 1em 50%;
        padding-left: 2em;
    }

    select#countries option[value="DE"] {
        background-image: url("path-to-de-icon.png");
        background-repeat: no-repeat;
        background-position: 1em 50%;
        padding-left: 2em;
    }
    .container {
                padding-left: 15em;
            }
        #successMessage {
            display: none;
        }
        #errorMessage {
            display: none;
        }
        #warningMessage {
            display: none;
        }
        body{
            overflow: scroll;
        }
        .create-contednt{
            margin-left: 5em ;
             margin-right: 5em; 
        }
        @media only screen and (max-width: 600px) {
            .create-contednt{
            margin-left: 0.3em ;
             margin-right: 0.3em;
        }
        .container {
                padding-left: 0em;
            }
        }

</style>
<%- include('../../../layouts/partials/createnav.ejs') %>

    <div class="create-contednt" style="overflow: scroll; overflow: scroll;" id="codntent-menu">
        
        <div class="container mt-3">
            <div id="successMessage"
            class="msg px-4 py-2 text-sm text-green-800 bg-green-50  rounded-lg"
            style="margin-left: 18em; margin-right: 2em;">
            <span id="successText" class="font-medium">
            </span>
            </div>
            <div id="errorMessage"
            class="msg px-4 py-2 text-sm text-red-800 bg-red-50  rounded-lg"
            style="margin-left: 18em; margin-right: 2em;">
            <span id="errorText" class="font-medium">
            </span>
            </div>
            <div id="warningMessage"
            class="msg px-4 py-2 text-sm text-yellow-800 bg-yellow-50  rounded-lg"
            style="margin-left: 18em; margin-right: 2em;">
            <span id="warningText" class="font-medium">
            </span>
            </div>

        </div>
            <form style="overflow: scroll;"
            id="quizForm"
            method="POST"
            action="/quizcard"
            enctype="multipart/form-data"
          >
                        <div class="flex content-center items-center justify-between w-full">
                        <span>Enter your Cards details</span>
                        <button type="submit" class="p-3 bg-blue-500 text-white rounded">Done</button>
                    </div>
                    <div class="flex flex-col">
                        <div class="relative z-0 w-full mb-6 group">
                            <input type="Title" name="title" id="title"
                                class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-black dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                                placeholder=" " required />
                            <label for="title"
                                class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Title
                            </label>
                        </div>
                        <div class="grid md:grid-cols-2 md:gap-6">
                            <div>
                                <label for="message" class="block mb-2 text-sm font-medium text-gray-900 ">Your
                                    Description</label>
                                <textarea id="message" name="description" rows="4"
                                    class="block p-2.5 w-full text-sm  rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 "
                                    placeholder="Enter Card description" required></textarea>
                            </div>
                            <div class=" mt-3 relative z-0 w-full mb-6 group">
                                <div>
                                    <input type="text" id="tag_input"
                                        class="block py-2.5 px-0 w-full text-sm  bg-transparent border-0 border-b-2 border-gray-300 appearance-none  dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" />
                                    <label for="tag_input"
                                        class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Tags</label>
                                </div>
                                <br>
                                <input id="tags-post" class="hidden tags-post" type="text" value="ef,fe" name="tags">
                                <div class="tags flex flex-wrap" id="tags_container">

                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="flex mt-4 justify-between">
                        <div class="mb-3">
                            <label for="image" class="block text-gray-700">Image</label>
                            <input type="file" id="coverimage" name="image" class="form-input mt-1 block" onchange="coverimagePreview(event)" />
                        </div>
                        <div id="coverimagePreview"></div>
                        <div>

                            <label for="category" class="block mb-2 text-sm font-medium">Categorie</label>
                            <select name="category" id="countries"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                <option selected value="general">General</option>
                                <option value="technology">Technology</option>
                                <option value="education">Education</option>
                                <option value="health">Health and Fitness
                                </option>
                                <option value="sports">Sports</option>
                                <option value="food">Food and Cooking</option>
                                <option value="business">Business and Finance
                                </option>
                                <option value="art">Arts and Culture
                                </option>
                            </select>

                        </div>

                    </div>



                    <div class="mt-2">
                        <span>Enter a card</span>
                        <div class="flex flex-col justify-between flex-wrap" id="card_container">

                        </div>

                        <div>
                            <button type="button"
                                class="add-card-button p-2 text-center flex justify-center mt-3 rounded-md bg-purple-400">
                                <img width="20" height="20" src="https://img.icons8.com/android/24/000000/plus.png"
                                    alt="plus" />
                            </button>
                        </div>
                    </div>
                </form>

                <br><br>
        </div>
        <br><br><br>
    </div>
    <script>
        function coverimagePreview(event) {
  var reader = new FileReader();
  reader.onload = function () {
    var output = document.getElementById('coverimagePreview');
    output.innerHTML = '<img src="' + reader.result + '" class="w-32 rounded h-auto mt-2" />';
  };
  reader.readAsDataURL(event.target.files[0]);
}
let UsedLanguage = 'zh-cn';

        const tagInput = document.getElementById('tag_input');
        const tagsContainer = document.getElementById('tags_container');
        const cardContainer = document.getElementById('card_container');
        const addCardButton = document.querySelector('.add-card-button');
        const posttagsInput = document.querySelector('.tags-post');
        let inputElement = document.getElementById("tags-post");


        let cardCount = 0;
        const defaultImageURL = '/public/uploads/china_1687641298604.jpeg';

        function previewImage(event, cardCount) {
            const input = event.target;
            const preview = document.getElementById(`preview_${cardCount}`);
            const preview2 = document.getElementById(`preview2_${cardCount}`);


            if (input.files && input.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';

                };
                console.log(input.files[0]);
                preview2.value = input.files[0].name;
                reader.readAsDataURL(input.files[0]);

            } else {
                preview.src = defaultImageURL;
                preview.style.display = 'block';
            }
        }


            addCardButton.addEventListener('click', function () {
                cardCount++;

                const card = document.createElement('div');
                card.className = 'card w-full mb-4 border p-5 rounded-lg';
                card.innerHTML = `
        <div class="flex justify-between items-center content-center"> 
        <div class="card-number">${cardCount}</div>
        <button class="remove-card-button p-2 text-center flex justify-center mt-3 rounded-md bg-red-400">
            <img width="20" height="20" src="https://img.icons8.com/android/24/000000/minus.png" alt="minus" />
        </button>
        </div>

        <div class="w-full flex px-2 mb-6 md:mb-0">
        <div class="w-full px-2">
            <label class="w-full block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="term_${cardCount}">
            Term
            </label>
            
            <textarea
            class="card-input   bg-gray-50  resize-none w-full border-0 rounded-md"
            type="text"
            onchange="TranslatePost(event, ${cardCount})"

            name="cards[${cardCount - 1}][term]"
            id="term_${cardCount}"
            placeholder="Enter term"
            required ></textarea>

        </div>
        <div class="w-full px-2">
            <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="definition_${cardCount}">
            Definition
            </label>
            <input
            class="card-input rounded-md"
            type="text"
            name="cards[${cardCount - 1}][position]"
            value="${cardCount}"
            readonly
            style="display: none;"
            >
            <textarea
            class="card-input bg-gray-50  resize-none border-0 w-full rounded-md"
            type="text"
            name="cards[${cardCount - 1}][definition]"
            id="definition_${cardCount}"
            onchange="TranslatePost()"
            placeholder="Enter definition"
            required></textarea>
            <div style="height:6em; overflow:scroll; padding:0.5em " class=" hidden bg-gray-200 rounded-lg z-50 w-full hidden" id="definitionsList${cardCount - 1}"></div>

        </div>

        </div>
        <div class="w-full px-2 flex justify-between">

            <input
            class="card-input rounded-md"
            type="file"
            name="image"
            id="image_${cardCount}"
            accept="image/*"
            style="margin-top: 0.5rem;"
            onchange="previewImage(event, ${cardCount}) "
            value="${defaultImageURL}" 
            >
            <img id="preview_${cardCount}" class=" ml-5 mb-1 mt-1 w-16 h-16" src="${defaultImageURL}" alt="Preview" style="display: none;">
            <div class="w-1/2 px-2 flex flex-wrap">
        <label for="languges" class="block mb-2 text-sm font-medium text-gray-900 ">Select language</label>
        <select id="languges${cardCount}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
            <option selected  value="${UsedLanguage}">${UsedLanguage}</option>
            <option  value="en">English</option>
            <option value="fr">French</option>
            <option value="zh-cn">Chinese</option>
            <option  value="es">Spanish</option>
            <option value="ko">Korean</option>
        </select>
    </div>
</div>


        </div>
        <input
            class="card-input hidden rounded-md"
            type="text"
            
                name="cards[${cardCount - 1}][image]"
            value="${defaultImageURL}"
            id="preview2_${cardCount}"
            placeholder="Enter definition"
            required>
            

    `;

                cardContainer.appendChild(card);
                updateCardNumbers();
            });

    
            const languageDropdown = cardContainer.querySelector(`#languges${cardCount}`);
    languageDropdown.addEventListener('change', () => {
        showLanguageMessage(cardCount);
    });

    function showLanguageMessage(cardCount) {
    const languageDropdown = document.getElementById(`languges${cardCount}`);
    const selectedLanguage = languageDropdown.value;
    const languageMessage = document.getElementById(`languageMessage${cardCount}`);
    const languageName = getLanguageName(selectedLanguage); // Implement this function to get the language name based on the language code

    // languageMessage.textContent = `Add a new card (${cardCount}) - Selected language: ${languageName}`;
    // languageMessage.style.display = 'block';
}

// Implement the getLanguageName function to get the language name based on the language code
function getLanguageName(languageCode) {
    // Implement this function to map language codes to their respective language names
    // Example implementation:
    const languageMap = {
        'en': 'English',
        'fr': 'French',
        'ja': 'Japanese',
        'zh-cn': 'Chinese',
        'es': 'Spanish',
        'ko': 'Korean',
    };
    return languageMap[languageCode] || 'Unknown Language';
}

        function updateCardNumbers() {
            const cards = cardContainer.getElementsByClassName('card');
            for (let i = 0; i < cards.length; i++) {
                const card = cards[i];
                const cardNumber = card.querySelector('.card-number');
                cardNumber.textContent = i + 1;
            }
            cardCount = cards.length;
        }

        cardContainer.addEventListener('click', function (event) {
            if (event.target.classList.contains('remove-card-button')) {
                const card = event.target.closest('.card');
                if (card) {
                    card.remove();
                    updateCardNumbers();
                }
            }
        });

        function getRandomColor() {
            const colors = ['bg-red-200', 'bg-blue-200', 'bg-green-200', 'bg-yellow-200', 'bg-purple-200'];
            const randomIndex = Math.floor(Math.random() * colors.length);
            return colors[randomIndex];
        }
        // Replace the existing initialization of values with this code
        const values = inputElement.value.split(',');

        tagInput.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const tag = tagInput.value.trim();
                if (tag !== '') {
                    const tagElement = document.createElement('span');
                    const randomColor = getRandomColor();
                    tagElement.classList.add(
                        'text-xs',
                        'ml-3',
                        'font-semibold',
                        'inline-block',
                        'mb-2',
                        'py-1',
                        'px-2',
                        'uppercase',
                        'rounded',
                        'text-gray-600',
                        randomColor,
                        'uppercase',
                        'last:mr-0',
                        'mr-1'
                    );
                    tagElement.innerText = tag;

                    // Create a color input element
                    const colorInput = document.createElement('input');
                    colorInput.type = 'hidden';
                    colorInput.name = 'color[]';
                    colorInput.value = randomColor;
                    tagElement.appendChild(colorInput);

                    // Push the tag to the values array
                    values.push(tag);

                    // Update the value of the inputElement
                    inputElement.value = values.join(',');
                    console.log(inputElement.value);

                    tagsContainer.appendChild(tagElement);

                    tagInput.value = '';
                }
            }
        });

        tagsContainer.addEventListener('click', function (event) {
            if (event.target.classList.contains('tag-remove')) {
                event.target.parentNode.remove();
            }
        });

        const quizForm = document.getElementById('quizForm');
  quizForm.addEventListener('submit', handleFormSubmit);
    const successMessage = document.getElementById('successMessage');
    const successText = document.getElementById('successText');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    const warningMessage = document.getElementById('warningMessage');
    const warningText = document.getElementById('warningText');
  function handleFormSubmit(event) {
    event.preventDefault();


    // Serialize the form data
    const formData = new FormData(quizForm);

    // Create a new XMLHttpRequest instance
    const xhr = new XMLHttpRequest();

    // Configure the request
    xhr.open('POST', '/quizcard');

    // Define the function to handle the response
    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if(xhr.status === 500){
            console.log('Error sending card data:', xhr.status, xhr.statusText);
            // You can update the UI or display an error message here
          
            errorMessage.style.display = 'block';
            errorText.innerHTML = 'Error sending card data!';
        }
        if(xhr.status === 400){
            // You can update the UI or display an error message here
            successMessage.style.display = 'block';
            successText.innerHTML = xhr.responseText;
            warningMessage.style.display = 'block';
            warningText.innerHTML = 'Please fill all the fields! including the cards ';

        }
        if (xhr.status === 200) {
          // Request was successful, do something with the response
          console.log('Card data successfully sent!');
          successMessage.style.display = 'block';
          successText.innerHTML = 'Card data successfully sent!';
          // You can update the UI or display a success message here
          const id = xhr.responseText.id;
     
        //   window.location.href = `/home/quiz/${id}`; // Replace '/success-page' with the URL of the page you want to redirect to

        } else {
          // Request failed, handle the error
          console.error('Error sending card data:', xhr.status, xhr.statusText);
          errorMessage.style.display = 'block';
            errorText.innerHTML = 'Error sending card data!';
          // You can update the UI or display an error message here
        }
      }
    };

    // Send the request with the form data
    xhr.send(formData);
  }
  function TranslatePost(event, cardCount) {
  var definitionTextarea = event.target;
  const termTextarea = document.getElementById(`term_${cardCount}`);
  var definition = definitionTextarea.value.trim();

  // Check if the definition is not empty
    // Get the selected language from the dropdown
    const languageDropdown = document.getElementById(`languges${cardCount}`);
          const selectedLanguage = languageDropdown.value;

          // Make a POST request to the /api/translate endpoint to translate the definition
          const translateApiUrl = '/api/translate';
          const formData = new FormData();
          formData.append('text', definition);
          formData.append('targetLanguage', selectedLanguage);

          fetch(translateApiUrl, {
            method: 'POST',
            body: formData,
            
          })
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
              // Update the definition textarea with the translated text
              const translatedText = data.translatedText;
              const definitionTextarea = document.getElementById(`definition_${cardCount}`);
              if(selectedLanguage === 'zh-cn'){
                definitionTextarea.value = translatedText.text + ' ' + translatedText.pinyin;
                }else{

              definitionTextarea.value = translatedText.text;
              
                }   

            })
            .catch((error) => {
              console.error('Error translating definition:', error);
            });
  if (definition !== "") {

    // Make the API call to the dictionary API to get recommendations
    var apiUrl = `https://api.dictionaryapi.dev/api/v2/entries/en/${definition}`;
    fetch(apiUrl)
      .then((response) => response.json())
      .then((data) => {
        const texttrans = data[0].word
        if (data.length > 0 && data[0].meanings && data[0].meanings[0].definitions) {
          const definitions = data[0].meanings[0].definitions;
          console.log(definitions);
          // Display the definitions in a list on the card
          showDefinitions(definitions, cardCount);

        
        }
      })
      .catch((error) => {
        console.error('Error fetching recommendations:', error);
        clearDefinitions();
      });
  } else {
    // If the definition is empty, clear the recommendations dropdown or list
    clearDefinitions();
  }
}

  function showDefinitions(definitions, cardCount) {
    console.log('definitionsList' + cardCount - 1); 

    var definitionsList = document.getElementById(`definitionsList${cardCount -1 }`);
    console.log(definitionsList);
    definitionsList.style.display = "block";
    definitionsList.innerHTML = "";

    var definitionsUl = document.createElement("ul");
    definitionsUl.classList.add("definitions-ul");
    definitions.forEach((definition, index) => {
      var definitionLi = document.createElement("li");
      definitionLi.textContent = `${index + 1}. ${definition.definition}`;
      definitionsUl.appendChild(definitionLi);
      definitionLi.onclick = function () {
      // Fill the definition textarea with the selected recommendation
      var selectedRecommendation = this.textContent;
      var definitionTextarea = document.getElementById(`definition_${cardCount}`);
      definitionTextarea.value = selectedRecommendation;

      // Clear the recommendations dropdown or list after selection
      clearDefinitions()
    };
    });

    definitionsList.appendChild(definitionsUl);
  }

  function clearDefinitions() {
    // Clear the definitions list
    var definitionsList = document.getElementById(`definitionsList${cardCount -1 }`);
    definitionsList.innerHTML = "";
    definitionsList.style.display = "none";
  }

  function addCardElement(cardCount) {
    // ... Your existing code for adding card elements ...

    // Add the event listener to the term textarea
    var termTextarea = document.getElementById(`term_${cardCount}`);
    termTextarea.addEventListener('keyup', TranslatePost);

    // ... Other code ...
  }


   </script>