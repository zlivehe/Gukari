const express = require('express')
const Router = express.Router()
const catchAsync = require('../views/utilities/catchAsync')
const User = require('../model/auth/user')
const Board = require('../model/home/workspace/kanbanboard')
const boardData = require('../model/jsonschema')
const multer = require('multer');
const path = require('path')

const Event = require('../model/home/reminder/event')
const {storage} = require('../cloudinary/index')
const upload = multer({storage})


Router.post('/board', (req, res) => {
    const board = new Board(boardData);
    board.save((err, result) => {
      if (err) {
        res.status(500).send(err);
      } else {
        res.send(result);
      }
    });
  });

  Router.post('/kanbanboard/:id', upload.array('image'), catchAsync(async (req, res) => {
    const id = req.params.id;
    const board = await Board.findById(id);
  
    console.log(req.files);
    const data = JSON.parse(req.body.rows);
  
    try {
      // Find the board by ID
      const existingBoard = await Board.findById(id);
  
      // Update the board data with the received data
      existingBoard.rows = data.map(row => {
        console.log(row);
  
        // Filter out cards with null title or description
        const validCards = row.cards.filter(card => card.title !== null );
        const newRow = {
          title: row.title,
          position: row.position,
          cards: [],
        };
  
        for (let card of validCards) {
          console.log(card);
  
          if (card.row === row.position) {
            // Push the card to the same row
            console.log(card);
            newRow.cards.push({
              title: card.title,
              description: card.description,
              dueDate: card.dueDate,
              image: card.image, // Make sure this matches the schema definition
              position: card.position,
              row: card.row,
            });
          } else {
            const cardstring = JSON.stringify(card, null, 2);
          const cardjson = JSON.parse(cardstring);
            console.log(cardjson);
            // Push the card to the correct row based on card.row
            console.log('move card' + card);
            const targetRow = existingBoard.rows.find(r => r.position === cardjson.row);
            if (targetRow) {
              targetRow.cards.push({
                title: cardjson.title,
                description: cardjson.description,
                dueDate: cardjson.dueDate,
                image: cardjson.image, // Make sure this matches the schema definition
                position: cardjson.position,
                row: cardjson.row,
              });
            }
          }
        }
  
        return newRow;
      });
  
      existingBoard.rows.forEach(row => {
        row.cards.forEach(card => {
          const uploadedImage = req.files.find(file => file.originalname === card.image);
          if (uploadedImage) {
            card.image = uploadedImage.path; // Use the path generated by Multer
          }
        });
      });
  
      console.log(existingBoard.rows[0].cards[0]);
      // Save the updated board to the database
      await existingBoard.save();
  
      res.status(200).json({ message: 'Kanban board data saved successfully!' });
    } catch (err) {
      console.error('Failed to save Kanban board data:', err);
      res.status(500).json({ error: 'Failed to save Kanban board data.' });
    }
  }));
  





  

module.exports = Router;